/* Generated by Yosys 0.51+85 (git sha1 d3aec12fe, clang++ 18.1.8 -fPIC -O3) */
module spi(clk, rst, ss, mosi, miso, sck, done, din, dout);
  wire [7:0] _000_;
  wire _001_;
  wire [7:0] _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire [2:0] _023_;
  wire [2:0] _024_;
  wire [2:0] _025_;
  reg [2:0] bit_ct_q;
  input clk;
  wire clk;
  wire [7:0] data_d;
  reg [7:0] data_q;
  input [7:0] din;
  wire [7:0] din;
  output done;
  wire done;
  reg done_q;
  output [7:0] dout;
  wire [7:0] dout;
  reg [7:0] dout_q;
  output miso;
  wire miso;
  wire miso_d;
  reg miso_q;
  input mosi;
  wire mosi;
  wire mosi_d;
  reg mosi_q;
  input rst;
  wire rst;
  input sck;
  wire sck;
  wire sck_d;
  wire sck_old_d;
  reg sck_old_q;
  reg sck_q;
  input ss;
  wire ss;
  wire ss_d;
  reg ss_q;
  always @(posedge clk)
    if (_005_) data_q[0] <= data_d[0];
  always @(posedge clk)
    if (_005_) data_q[1] <= data_d[1];
  always @(posedge clk)
    if (_005_) data_q[2] <= data_d[2];
  always @(posedge clk)
    if (_005_) data_q[3] <= data_d[3];
  always @(posedge clk)
    if (_005_) data_q[4] <= data_d[4];
  always @(posedge clk)
    if (_005_) data_q[5] <= data_d[5];
  always @(posedge clk)
    if (_005_) data_q[6] <= data_d[6];
  always @(posedge clk)
    if (_005_) data_q[7] <= data_d[7];
  always @(posedge clk)
    if (rst) miso_q <= 1'h1;
    else if (_008_) miso_q <= miso_d;
  always @(posedge clk)
    mosi_q <= mosi;
  always @(posedge clk)
    ss_q <= ss;
  always @(posedge clk)
    sck_q <= sck;
  always @(posedge clk)
    sck_old_q <= sck_q;
  always @(posedge clk)
    if (_010_) bit_ct_q[0] <= 1'h0;
    else if (_019_) bit_ct_q[0] <= _024_[0];
  always @(posedge clk)
    if (_010_) bit_ct_q[1] <= 1'h0;
    else if (_019_) bit_ct_q[1] <= _025_[1];
  always @(posedge clk)
    if (_010_) bit_ct_q[2] <= 1'h0;
    else if (_019_) bit_ct_q[2] <= _025_[2];
  always @(posedge clk)
    if (_011_) done_q <= 1'h0;
    else done_q <= _003_;
  always @(posedge clk)
    if (rst) dout_q[0] <= 1'h0;
    else if (_009_) dout_q[0] <= mosi_q;
  always @(posedge clk)
    if (rst) dout_q[1] <= 1'h0;
    else if (_009_) dout_q[1] <= data_q[0];
  always @(posedge clk)
    if (rst) dout_q[2] <= 1'h0;
    else if (_009_) dout_q[2] <= data_q[1];
  always @(posedge clk)
    if (rst) dout_q[3] <= 1'h0;
    else if (_009_) dout_q[3] <= data_q[2];
  always @(posedge clk)
    if (rst) dout_q[4] <= 1'h0;
    else if (_009_) dout_q[4] <= data_q[3];
  always @(posedge clk)
    if (rst) dout_q[5] <= 1'h0;
    else if (_009_) dout_q[5] <= data_q[4];
  always @(posedge clk)
    if (rst) dout_q[6] <= 1'h0;
    else if (_009_) dout_q[6] <= data_q[5];
  always @(posedge clk)
    if (rst) dout_q[7] <= 1'h0;
    else if (_009_) dout_q[7] <= data_q[6];
  assign _015_ = ~bit_ct_q[2];
  assign _013_ = ~_019_;
  assign _024_[0] = ~bit_ct_q[0];
  assign _016_ = _024_[0] |  _014_;
  assign _018_ = _016_ |  _015_;
  assign _010_ = rst |  ss_q;
  assign _011_ = _010_ |  _013_;
  assign _017_ = _019_ &  _003_;
  assign _009_ = _017_ &  _012_;
  assign _008_ = _007_ &  _006_;
  assign _007_ = ss_q |  _013_;
  assign _005_ = ss_q |  _019_;
  assign _006_ = _005_ |  _020_;
  assign _021_ = ~ sck_old_q;
  assign _003_ = ~ _018_;
  assign _022_ = ~ sck_q;
  assign _019_ = _021_ &  sck_q;
  assign _020_ = sck_old_q &  _022_;
  assign _004_ = _020_ ?  data_q[7] : 1'hx;
  assign _002_[0] = _018_ ?  mosi_q : din[0];
  assign _002_[1] = _018_ ?  data_q[0] : din[1];
  assign _002_[2] = _018_ ?  data_q[1] : din[2];
  assign _002_[3] = _018_ ?  data_q[2] : din[3];
  assign _002_[4] = _018_ ?  data_q[3] : din[4];
  assign _002_[5] = _018_ ?  data_q[4] : din[5];
  assign _002_[6] = _018_ ?  data_q[5] : din[6];
  assign _002_[7] = _018_ ?  data_q[6] : din[7];
  assign _000_[0] = _019_ ?  _002_[0] : 1'hx;
  assign _000_[1] = _019_ ?  _002_[1] : 1'hx;
  assign _000_[2] = _019_ ?  _002_[2] : 1'hx;
  assign _000_[3] = _019_ ?  _002_[3] : 1'hx;
  assign _000_[4] = _019_ ?  _002_[4] : 1'hx;
  assign _000_[5] = _019_ ?  _002_[5] : 1'hx;
  assign _000_[6] = _019_ ?  _002_[6] : 1'hx;
  assign _000_[7] = _019_ ?  _002_[7] : 1'hx;
  assign _001_ = _019_ ?  1'hx : _004_;
  assign miso_d = ss_q ?  data_q[7] : _001_;
  assign data_d[0] = ss_q ?  din[0] : _000_[0];
  assign data_d[1] = ss_q ?  din[1] : _000_[1];
  assign data_d[2] = ss_q ?  din[2] : _000_[2];
  assign data_d[3] = ss_q ?  din[3] : _000_[3];
  assign data_d[4] = ss_q ?  din[4] : _000_[4];
  assign data_d[5] = ss_q ?  din[5] : _000_[5];
  assign data_d[6] = ss_q ?  din[6] : _000_[6];
  assign data_d[7] = ss_q ?  din[7] : _000_[7];
  assign _012_ = ~ ss_q;
  assign _014_ = ~ bit_ct_q[1];
  assign _025_[1] = bit_ct_q[1] ^  bit_ct_q[0];
  assign _025_[2] = bit_ct_q[2] ^  _023_[1];
  assign _023_[1] = bit_ct_q[1] &  bit_ct_q[0];
  assign _023_[0] = bit_ct_q[0];
  assign _024_[2:1] = bit_ct_q[2:1];
  assign _025_[0] = _024_[0];
  assign done = done_q;
  assign dout = dout_q;
  assign miso = miso_q;
  assign mosi_d = mosi;
  assign sck_d = sck;
  assign sck_old_d = sck_q;
  assign ss_d = ss;
endmodule
