/* Generated by Yosys 0.51+85 (git sha1 d3aec12fe, clang++ 18.1.8 -fPIC -O3) */

(* top =  1  *)
(* src = "spi.v:24.1-101.10" *)
module spi(clk, rst, ss, mosi, miso, sck, done, din, dout);
  (* src = "spi.v:50.3-78.6" *)
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  (* src = "spi.v:66.11-66.30" *)
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  (* force_downto = 32'd1 *)
  (* src = "spi.v:68.20-68.35|/opt/oss-cad-suite/lib/../share/yosys/techmap.v:270.23-270.24" *)
  wire [2:0] _21_;
  (* force_downto = 32'd1 *)
  (* src = "spi.v:68.20-68.35|/opt/oss-cad-suite/lib/../share/yosys/techmap.v:270.26-270.27" *)
  wire [2:0] _22_;
  (* src = "spi.v:42.23-42.31" *)
  reg [2:0] bit_ct_q;
  (* src = "spi.v:25.11-25.14" *)
  input clk;
  wire clk;
  (* src = "spi.v:40.13-40.19" *)
  wire [7:0] data_d;
  (* src = "spi.v:40.21-40.27" *)
  reg [7:0] data_q;
  (* src = "spi.v:32.17-32.20" *)
  input [7:0] din;
  wire [7:0] din;
  (* src = "spi.v:31.12-31.16" *)
  output done;
  wire done;
  (* src = "spi.v:41.15-41.21" *)
  reg done_q;
  (* src = "spi.v:33.18-33.22" *)
  output [7:0] dout;
  wire [7:0] dout;
  (* src = "spi.v:43.21-43.27" *)
  reg [7:0] dout_q;
  (* src = "spi.v:29.12-29.16" *)
  output miso;
  wire miso;
  (* src = "spi.v:44.7-44.13" *)
  wire miso_d;
  (* src = "spi.v:44.15-44.21" *)
  reg miso_q;
  (* src = "spi.v:28.11-28.15" *)
  input mosi;
  wire mosi;
  (* src = "spi.v:36.7-36.13" *)
  wire mosi_d;
  (* src = "spi.v:36.15-36.21" *)
  reg mosi_q;
  (* src = "spi.v:26.11-26.14" *)
  input rst;
  wire rst;
  (* src = "spi.v:30.11-30.14" *)
  input sck;
  wire sck;
  (* src = "spi.v:38.7-38.12" *)
  wire sck_d;
  (* src = "spi.v:39.7-39.16" *)
  wire sck_old_d;
  (* src = "spi.v:39.18-39.27" *)
  reg sck_old_q;
  (* src = "spi.v:38.14-38.19" *)
  reg sck_q;
  (* src = "spi.v:27.11-27.13" *)
  input ss;
  wire ss;
  (* src = "spi.v:37.7-37.11" *)
  wire ss_d;
  (* src = "spi.v:37.13-37.17" *)
  reg ss_q;
  assign _21_[0] = ~bit_ct_q[0];
  assign _06_ = sck_q & ~(sck_old_q);
  assign _04_ = ss_q | rst;
  assign _07_ = sck_old_q | ~(sck_q);
  assign _05_ = _04_ | _07_;
  assign _08_ = bit_ct_q[0] & bit_ct_q[1];
  assign _00_ = _08_ & bit_ct_q[2];
  assign _09_ = _00_ & ~(_07_);
  assign _03_ = _09_ & ~(ss_q);
  assign _10_ = _07_ | ss_q;
  assign _01_ = _06_ | ss_q;
  assign _11_ = sck_q | ~(sck_old_q);
  assign _12_ = _11_ & ~(_01_);
  assign _02_ = _10_ & ~(_12_);
  assign _13_ = _00_ ? din[0] : mosi_q;
  assign data_d[0] = ss_q ? din[0] : _13_;
  assign _14_ = _00_ ? din[1] : data_q[0];
  assign data_d[1] = ss_q ? din[1] : _14_;
  assign _15_ = _00_ ? din[2] : data_q[1];
  assign data_d[2] = ss_q ? din[2] : _15_;
  assign _16_ = _00_ ? din[3] : data_q[2];
  assign data_d[3] = ss_q ? din[3] : _16_;
  assign _17_ = _00_ ? din[4] : data_q[3];
  assign data_d[4] = ss_q ? din[4] : _17_;
  assign _18_ = _00_ ? din[5] : data_q[4];
  assign data_d[5] = ss_q ? din[5] : _18_;
  assign _19_ = _00_ ? din[6] : data_q[5];
  assign data_d[6] = ss_q ? din[6] : _19_;
  assign _20_ = _00_ ? din[7] : data_q[6];
  assign data_d[7] = ss_q ? din[7] : _20_;
  assign _22_[1] = bit_ct_q[0] ^ bit_ct_q[1];
  assign _22_[2] = _08_ ^ bit_ct_q[2];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (_01_) data_q[0] <= data_d[0];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (_01_) data_q[1] <= data_d[1];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (_01_) data_q[2] <= data_d[2];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (_01_) data_q[3] <= data_d[3];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (_01_) data_q[4] <= data_d[4];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (_01_) data_q[5] <= data_d[5];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (_01_) data_q[6] <= data_d[6];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (_01_) data_q[7] <= data_d[7];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (rst) miso_q <= 1'h1;
    else if (_02_) miso_q <= data_q[7];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    mosi_q <= mosi;
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    ss_q <= ss;
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    sck_q <= sck;
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    sck_old_q <= sck_q;
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (_04_) bit_ct_q[0] <= 1'h0;
    else if (_06_) bit_ct_q[0] <= _21_[0];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (_04_) bit_ct_q[1] <= 1'h0;
    else if (_06_) bit_ct_q[1] <= _22_[1];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (_04_) bit_ct_q[2] <= 1'h0;
    else if (_06_) bit_ct_q[2] <= _22_[2];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (_05_) done_q <= 1'h0;
    else done_q <= _00_;
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (rst) dout_q[0] <= 1'h0;
    else if (_03_) dout_q[0] <= mosi_q;
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (rst) dout_q[1] <= 1'h0;
    else if (_03_) dout_q[1] <= data_q[0];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (rst) dout_q[2] <= 1'h0;
    else if (_03_) dout_q[2] <= data_q[1];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (rst) dout_q[3] <= 1'h0;
    else if (_03_) dout_q[3] <= data_q[2];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (rst) dout_q[4] <= 1'h0;
    else if (_03_) dout_q[4] <= data_q[3];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (rst) dout_q[5] <= 1'h0;
    else if (_03_) dout_q[5] <= data_q[4];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (rst) dout_q[6] <= 1'h0;
    else if (_03_) dout_q[6] <= data_q[5];
  (* src = "spi.v:80.3-99.6" *)
  always @(posedge clk)
    if (rst) dout_q[7] <= 1'h0;
    else if (_03_) dout_q[7] <= data_q[6];
  assign _21_[2:1] = bit_ct_q[2:1];
  assign _22_[0] = _21_[0];
  assign done = done_q;
  assign dout = dout_q;
  assign miso = miso_q;
  assign miso_d = data_q[7];
  assign mosi_d = mosi;
  assign sck_d = sck;
  assign sck_old_d = sck_q;
  assign ss_d = ss;
endmodule
